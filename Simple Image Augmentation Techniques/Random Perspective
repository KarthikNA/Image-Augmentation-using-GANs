{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Random Perspective","provenance":[{"file_id":"1GNej4SFMyGs1pyCmPtrxyf4JLL3hm9iA","timestamp":1575992799215}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"dihIoWlcNo6_","colab_type":"code","colab":{}},"source":["!nvidia-smi"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V14lnGrxS5oK","colab_type":"text"},"source":["# **SET VALUES HERE**"]},{"cell_type":"code","metadata":{"id":"3BdCbcrpS9Oy","colab_type":"code","colab":{}},"source":["epoch_count = 50\n","batch = 64\n","n_workers = 8"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7yAVCGkl6vIz","colab_type":"code","colab":{}},"source":["import datetime \n","a = datetime.datetime.now()\n","a"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aSyVPi73TEbS","colab_type":"text"},"source":["# **SET VALUE ENDS HERE**"]},{"cell_type":"code","metadata":{"id":"O8qBPhVtQfTH","colab_type":"code","colab":{}},"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","from torchvision import datasets\n","import torchvision.models as models\n","from torch.optim import lr_scheduler\n","import torch.nn as nn\n","import torch.optim as optim\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import time\n","import os\n","import copy\n","#from tqdm.autonotebook import tqdm\n","from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\n","import inspect"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VAUWyF8xX3jc","colab_type":"code","colab":{}},"source":["plt.ion()\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iEsBQhnGAMGu","colab_type":"code","colab":{}},"source":["# Random Perspective\n","transform = transforms.Compose(\n","    [transforms.RandomPerspective(distortion_scale=0.5, p=0.5, interpolation=3),\n","     transforms.ToTensor(),\n","     transforms.Normalize([0.5],[0.5])])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1gayMZTZSO5K","colab_type":"code","colab":{}},"source":["trainset = torchvision.datasets.CIFAR10(root='./Data',train=True,download=True, transform=transform)\n","print(len(trainset))\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch,shuffle=True, num_workers=n_workers)\n","\n","#valid_size=0.1\n","#valid_dataset = torchvision.datasets.CIFAR10(root='./Data', train=True,download=True, transform=transform)\n","\n","testset = torchvision.datasets.CIFAR10(root='./Data',train=False,download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=batch,shuffle=False, num_workers=n_workers)\n","\n","classes = ('plane', 'car', 'bird', 'cat','deer', 'dog', 'frog', 'horse', 'ship', 'truck')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FSCV01jIcMNh","colab_type":"code","colab":{}},"source":["def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","    plt.show()\n","\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = dataiter.next()\n","\n","# show images\n","imshow(torchvision.utils.make_grid(images))\n","# print labels\n","print(' '.join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qIYQMqbAjz4k","colab_type":"code","colab":{}},"source":["model_ft = models.resnet18(pretrained=True)\n","#We need to change the last layer as per our requirement. \n","#We can freeze whichever layer we donâ€™t want to train \n","#and pass the remaining layer parameters to the optimizer(we will see later).\n","#Change the last layer\n","num_ftrs = model_ft.fc.in_features\n","model_ft.fc = nn.Linear(num_ftrs, 10)\n","model_ft = model_ft.to(device)\n","model_ft = torch.nn.DataParallel(model_ft)\n","criterion = nn.CrossEntropyLoss()\n","\n","# Observe that all parameters are being optimized\n","optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)\n","# Decay LR by a factor of 0.1 every 7 epochs\n","exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"NNll8TSsaCPU","colab_type":"code","colab":{}},"source":["for epoch in range(epoch_count):  # loop over the dataset multiple times\n","    print(\"Epoch:{}\".format(epoch))\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs; data is a list of [inputs, labels]\n","        inputs, labels = data[0].to(device),data[1].to(device)\n","        #inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer_ft.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = model_ft(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer_ft.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","print('Finished Training')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UlN42_McvlqB","colab_type":"code","colab":{}},"source":["#Test the model on test set\n","\n","dataiter = iter(testloader)\n","images, labels = dataiter.next()\n","\n","# print images\n","imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"41sWwi9yxLTx","colab_type":"code","colab":{}},"source":["images = images.to(device)\n","labels = labels.to(device)\n","outputs = model_ft(images)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JfNhGWYHxoY-","colab_type":"code","colab":{}},"source":["_, predicted = torch.max(outputs, 1)\n","\n","print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n","                              for j in range(4)))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VIzB3A9CxytT","colab_type":"code","colab":{}},"source":["correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        outputs = model_ft(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4-GdV2SQyTDE","colab_type":"code","colab":{}},"source":["class_correct = list(0. for i in range(10))\n","class_total = list(0. for i in range(10))\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        images = images.to(device)\n","        labels = labels.to(device)\n","        outputs = model_ft(images)\n","        _, predicted = torch.max(outputs, 1)\n","        c = (predicted == labels).squeeze()\n","        for i in range(4):\n","            label = labels[i]\n","            class_correct[label] += c[i].item()\n","            class_total[label] += 1\n","\n","\n","for i in range(10):\n","    print('Accuracy of %5s : %2d %%' % (\n","        classes[i], 100 * class_correct[i] / class_total[i]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pByMBMs-62r_","colab_type":"code","colab":{}},"source":["b = datetime.datetime.now()\n","print(b)\n","print((b-a).total_seconds())\n"],"execution_count":0,"outputs":[]}]}